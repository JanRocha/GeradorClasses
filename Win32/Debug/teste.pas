unit Uteste;

//  *************************************************
//    Generated By: JsonToDelphiClass 
//    Project link original: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On         : 2024-09-27 00:33:19
//  *************************************************
//    Created By           : Petar Georgiev - 2014
//    WebSite              : http://pgeorgiev.com
//  *************************************************
//    Updated By           : Janailson Rocha - 2021
//    WebSite              : 
//  *************************************************

interface

uses Generics.Collections, Rest.Json, Classes;

type

TPessoasContato = class(TPersistent)
private
  FDescricao: String;
  FId: Extended;
published
  property descricao: String read FDescricao write FDescricao;
  property id: Extended read FId write FId;
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TPessoasContato;
end;

TTiposContato = class(TPersistent)
private
  FDescricao: String;
  FId: Extended;
published
  property descricao: String read FDescricao write FDescricao;
  property id: Extended read FId write FId;
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TTiposContato;
end;

TPais = class(TPersistent)
private
  FNome: String;
published
  property nome: String read FNome write FNome;
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TPais;
end;

TCategoria = class(TPersistent)
private
  FId: Extended;
published
  property id: Extended read FId write FId;
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TCategoria;
end;

TFinanceiro = class(TPersistent)
private
  FCategoria: TCategoria;
  FCondicaoPagamento: String;
  FLimiteCredito: Extended;
published
  property categoria: TCategoria read FCategoria write FCategoria;
  property condicaoPagamento: String read FCondicaoPagamento write FCondicaoPagamento;
  property limiteCredito: Extended read FLimiteCredito write FLimiteCredito;
public
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TFinanceiro;
end;

TDadosAdicionais = class(TPersistent)
private
  FDataNascimento: TDate;
  FNaturalidade: String;
  FSexo: String;
published
  property dataNascimento: TDate read FDataNascimento write FDataNascimento;
  property naturalidade: String read FNaturalidade write FNaturalidade;
  property sexo: String read FSexo write FSexo;
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TDadosAdicionais;
end;

TVendedor = class(TPersistent)
private
  FId: Extended;
published
  property id: Extended read FId write FId;
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TVendedor;
end;

TCobranca = class(TPersistent)
private
  FBairro: String;
  FCep: String;
  FComplemento: String;
  FEndereco: String;
  FMunicipio: String;
  FNumero: String;
  FUf: String;
published
  property bairro: String read FBairro write FBairro;
  property cep: String read FCep write FCep;
  property complemento: String read FComplemento write FComplemento;
  property endereco: String read FEndereco write FEndereco;
  property municipio: String read FMunicipio write FMunicipio;
  property numero: String read FNumero write FNumero;
  property uf: String read FUf write FUf;
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TCobranca;
end;

TGeral = class(TPersistent)
private
  FBairro: String;
  FCep: String;
  FComplemento: String;
  FEndereco: String;
  FMunicipio: String;
  FNumero: String;
  FUf: String;
published
  property bairro: String read FBairro write FBairro;
  property cep: String read FCep write FCep;
  property complemento: String read FComplemento write FComplemento;
  property endereco: String read FEndereco write FEndereco;
  property municipio: String read FMunicipio write FMunicipio;
  property numero: String read FNumero write FNumero;
  property uf: String read FUf write FUf;
public
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TGeral;
end;

TEndereco = class(TPersistent)
private
  FCobranca: TCobranca;
  FGeral: TGeral;
published
  property cobranca: TCobranca read FCobranca write FCobranca;
  property geral: TGeral read FGeral write FGeral;
public
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TEndereco;
end;

TData = class(TPersistent)
private
  FCelular: String;
  FCodigo: String;
  FDadosAdicionais: TDadosAdicionais;
  FEmail: String;
  FEndereco: TEndereco;
  FFantasia: String;
  FFinanceiro: TFinanceiro;
  FId: Extended;
  FIe: String;
  FIndicadorIe: Extended;
  FNome: String;
  FNumeroDocumento: String;
  FOrgaoEmissor: String;
  FPais: TPais;
  FPessoasContato: TArray<TPessoasContato>;
  FRg: String;
  FSituacao: String;
  FTelefone: String;
  FTipo: String;
  FTiposContato: TArray<TTiposContato>;
  FVendedor: TVendedor;
published
  property celular: String read FCelular write FCelular;
  property codigo: String read FCodigo write FCodigo;
  property dadosAdicionais: TDadosAdicionais read FDadosAdicionais write FDadosAdicionais;
  property email: String read FEmail write FEmail;
  property endereco: TEndereco read FEndereco write FEndereco;
  property fantasia: String read FFantasia write FFantasia;
  property financeiro: TFinanceiro read FFinanceiro write FFinanceiro;
  property id: Extended read FId write FId;
  property ie: String read FIe write FIe;
  property indicadorIe: Extended read FIndicadorIe write FIndicadorIe;
  property nome: String read FNome write FNome;
  property numeroDocumento: String read FNumeroDocumento write FNumeroDocumento;
  property orgaoEmissor: String read FOrgaoEmissor write FOrgaoEmissor;
  property pais: TPais read FPais write FPais;
  property pessoasContato: TArray<TPessoasContato> read FPessoasContato write FPessoasContato;
  property rg: String read FRg write FRg;
  property situacao: String read FSituacao write FSituacao;
  property telefone: String read FTelefone write FTelefone;
  property tipo: String read FTipo write FTipo;
  property tiposContato: TArray<TTiposContato> read FTiposContato write FTiposContato;
  property vendedor: TVendedor read FVendedor write FVendedor;
public
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TData;
end;

TTeste = class(TPersistent)
private
  FData: TData;
published
  property data: TData read FData write FData;
public
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TTeste;
end;

implementation

{TPessoasContato}


function TPessoasContato.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TPessoasContato.FromJsonString(AJsonString: string): TPessoasContato;
begin
  result := TJson.JsonToObject<TPessoasContato>(AJsonString)
end;

{TTiposContato}


function TTiposContato.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TTiposContato.FromJsonString(AJsonString: string): TTiposContato;
begin
  result := TJson.JsonToObject<TTiposContato>(AJsonString)
end;

{TPais}


function TPais.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TPais.FromJsonString(AJsonString: string): TPais;
begin
  result := TJson.JsonToObject<TPais>(AJsonString)
end;

{TCategoria}


function TCategoria.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TCategoria.FromJsonString(AJsonString: string): TCategoria;
begin
  result := TJson.JsonToObject<TCategoria>(AJsonString)
end;

{TFinanceiro}

constructor TFinanceiro.Create;
begin
  inherited;
  FCategoria := TCategoria.Create();
end;

destructor TFinanceiro.Destroy;
begin
  FCategoria.free;
  inherited;
end;

function TFinanceiro.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TFinanceiro.FromJsonString(AJsonString: string): TFinanceiro;
begin
  result := TJson.JsonToObject<TFinanceiro>(AJsonString)
end;

{TDadosAdicionais}


function TDadosAdicionais.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TDadosAdicionais.FromJsonString(AJsonString: string): TDadosAdicionais;
begin
  result := TJson.JsonToObject<TDadosAdicionais>(AJsonString)
end;

{TVendedor}


function TVendedor.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TVendedor.FromJsonString(AJsonString: string): TVendedor;
begin
  result := TJson.JsonToObject<TVendedor>(AJsonString)
end;

{TCobranca}


function TCobranca.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TCobranca.FromJsonString(AJsonString: string): TCobranca;
begin
  result := TJson.JsonToObject<TCobranca>(AJsonString)
end;

{TGeral}


function TGeral.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TGeral.FromJsonString(AJsonString: string): TGeral;
begin
  result := TJson.JsonToObject<TGeral>(AJsonString)
end;

{TEndereco}

constructor TEndereco.Create;
begin
  inherited;
  FGeral := TGeral.Create();
  FCobranca := TCobranca.Create();
end;

destructor TEndereco.Destroy;
begin
  FGeral.free;
  FCobranca.free;
  inherited;
end;

function TEndereco.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TEndereco.FromJsonString(AJsonString: string): TEndereco;
begin
  result := TJson.JsonToObject<TEndereco>(AJsonString)
end;

{TData}

constructor TData.Create;
begin
  inherited;
  FEndereco := TEndereco.Create();
  FVendedor := TVendedor.Create();
  FDadosAdicionais := TDadosAdicionais.Create();
  FFinanceiro := TFinanceiro.Create();
  FPais := TPais.Create();
end;

destructor TData.Destroy;
var
  LtiposContatoItem: TTiposContato;
  LpessoasContatoItem: TPessoasContato;
begin

 for LtiposContatoItem in FTiposContato do
   LtiposContatoItem.free;
 for LpessoasContatoItem in FPessoasContato do
   LpessoasContatoItem.free;

  FEndereco.free;
  FVendedor.free;
  FDadosAdicionais.free;
  FFinanceiro.free;
  FPais.free;
  inherited;
end;

function TData.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TData.FromJsonString(AJsonString: string): TData;
begin
  result := TJson.JsonToObject<TData>(AJsonString)
end;

{TTeste}

constructor TTeste.Create;
begin
  inherited;
  FData := TData.Create();
end;

destructor TTeste.Destroy;
begin
  FData.free;
  inherited;
end;

function TTeste.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TTeste.FromJsonString(AJsonString: string): TTeste;
begin
  result := TJson.JsonToObject<TTeste>(AJsonString)
end;

end.
