unit UGerarModel;

interface

uses Classes;

type
  TGerarModel = class(TPersistent)
  public
    function ValidaCampo(value, precisao, subTipo: string): string;
    procedure GerarModel(Tabela: string);
    function PrimeiraLetraMaiscula(Str: string): string;
  end;

implementation

uses
  FMX.Memo, UTabelas, System.SysUtils;

{ TGerarModel }

procedure TGerarModel.GerarModel(Tabela: string);
var
  Memo1: TMemo;
  oTabela: TTabela;
begin
  oTabela := TTabela.Create;
  oTabela.Query.SQL.Add('SELECT R.RDB$FIELD_NAME AS Nome_Campo,');
  oTabela.Query.SQL.Add('         CASE F.RDB$FIELD_TYPE        ');
  oTabela.Query.SQL.Add('           WHEN 7 THEN ''SMALLINT''     ');
  oTabela.Query.SQL.Add('           WHEN 8 THEN ''INTEGER''      ');
  oTabela.Query.SQL.Add('           WHEN 10 THEN ''FLOAT''       ');
  oTabela.Query.SQL.Add('           WHEN 11 THEN ''D_FLOAT''     ');
  oTabela.Query.SQL.Add('           WHEN 12 THEN ''DATE''        ');
  oTabela.Query.SQL.Add('           WHEN 13 THEN ''TIME''        ');
  oTabela.Query.SQL.Add('           WHEN 14 THEN ''CHAR''       ');
  oTabela.Query.SQL.Add('           WHEN 16 THEN ''INT64''      ');
  oTabela.Query.SQL.Add('           WHEN 27 THEN ''DOUBLE''      ');
  oTabela.Query.SQL.Add('           WHEN 35 THEN ''TIMESTAMP''    ');
  oTabela.Query.SQL.Add('           WHEN 37 THEN ''VARCHAR''     ');
  oTabela.Query.SQL.Add('           WHEN 40 THEN ''CSTRING''       ');
  oTabela.Query.SQL.Add('           WHEN 261 THEN ''BLOB''         ');
  oTabela.Query.SQL.Add('           ELSE ''UNKNOWN''               ');
  oTabela.Query.SQL.Add('          END AS Tipo_Campo,              ');
  oTabela.Query.SQL.Add(' RDB$FIELD_PRECISION AS PRECISAO, ');
  oTabela.Query.SQL.Add(' RDB$FIELD_SUB_TYPE  AS SUB_TIPO');
  oTabela.Query.SQL.Add('    FROM RDB$RELATION_FIELDS R           ');
  oTabela.Query.SQL.Add
    ('     JOIN RDB$FIELDS F ON R.RDB$FIELD_SOURCE = F.RDB$FIELD_NAME ');
  oTabela.Query.SQL.Add('   WHERE R.RDB$RELATION_NAME = ' + quotedSTr(Tabela));
  oTabela.Query.SQL.Add(' ORDER BY R.RDB$FIELD_POSITION');

  oTabela.Query.Open();
  Tabela:= PrimeiraLetraMaiscula(Tabela);
  Memo1 := TMemo.Create(nil);
  Memo1.Lines.Add('unit U' + Tabela + ';');
  Memo1.Lines.Add('');
  Memo1.Lines.Add('interface');
  Memo1.Lines.Add('');
  Memo1.Lines.Add('uses');
  Memo1.Lines.Add('  Classes,');
  Memo1.Lines.Add('  System.Generics.Collections,');
  Memo1.Lines.Add('  System.SysUtils,            ');
  Memo1.Lines.Add('  Data.SqlExpr,               ');
  Memo1.Lines.Add('  UTabela;                    ');
  Memo1.Lines.Add('');
  Memo1.Lines.Add('type');
  Memo1.Lines.Add('  T' + Tabela + ' = class(TPersistent)');
  Memo1.Lines.Add('  private');
  Memo1.Lines.Add('    FTabela: TTabela;');
  while not oTabela.Query.Eof do
  begin
    Memo1.Lines.Add('    F' + PrimeiraLetraMaiscula(oTabela.Query.FieldByName('Nome_Campo').AsString) + ': '+
    ValidaCampo(oTabela.Query.FieldByName('Tipo_Campo').AsString,oTabela.Query.FieldByName('PRECISAO').AsString,oTabela.Query.FieldByName('SUB_TIPO').AsString) +';');
    oTabela.Query.Next;
  end;
  Memo1.Lines.Add('  published');
  oTabela.Query.First;
  while not oTabela.Query.Eof do
  begin
    Memo1.Lines.Add('    property ' +PrimeiraLetraMaiscula(oTabela.Query.FieldByName('Nome_Campo').AsString) + ': ' +
    ValidaCampo(oTabela.Query.FieldByName('Tipo_Campo').AsString,oTabela.Query.FieldByName('PRECISAO').AsString,oTabela.Query.FieldByName('SUB_TIPO').AsString)+
     ' read F' + PrimeiraLetraMaiscula(PrimeiraLetraMaiscula(oTabela.Query.FieldByName('Nome_Campo').AsString)) +
     ' write F'+ PrimeiraLetraMaiscula(PrimeiraLetraMaiscula(oTabela.Query.FieldByName('Nome_Campo').AsString)) +';');
    oTabela.Query.Next;
  end;
  Memo1.Lines.Add('public');
  Memo1.Lines.Add('   function NomeTabela():string;');
  Memo1.Lines.Add('   function Carregar(): TObjectList<T'+Tabela+'>;');
  Memo1.Lines.Add('   function Gravar(): boolean;                   ');
  Memo1.Lines.Add('   function Delete(): boolean;                   ');
  Memo1.Lines.Add('   function NomeGenerator(): string;             ');
  Memo1.Lines.Add('   constructor Create(_id:integer = -1); ');
  Memo1.Lines.Add('   constructor CreateFirst(_Filter = ''''); ');
  Memo1.Lines.Add('  end;');
  Memo1.Lines.Add('');
  Memo1.Lines.Add('implementation');
  Memo1.Lines.Add('');
  Memo1.Lines.Add('{T'+Tabela+'}');
  Memo1.Lines.Add('');

  Memo1.Lines.Add('constructor T'+ Tabela+'.Create(_id: integer);');
  Memo1.Lines.Add('var');
  Memo1.Lines.Add('FTabela: TTabela;  ');
  Memo1.Lines.Add('oqry   : TSQLQuery;');
  Memo1.Lines.Add('sSQL   : string;   ');
  Memo1.Lines.Add('begin');
  Memo1.Lines.Add('if _id > 0 then                                     ');
  Memo1.Lines.Add('begin                                               ');
  Memo1.Lines.Add('  sSQL    := ''SELECT * FROM '' + NomeTabela;         ');
  Memo1.Lines.Add('  sSQL    := sSQL + '' WHERE ID = '' + IntToStr(_id); ');
  Memo1.Lines.Add('  sSQL    := sSQL + '' ORDER BY ID'';       ');
  Memo1.Lines.Add('  FTabela := TTabela.Create;             ');
  Memo1.Lines.Add('  try                                     ');
  Memo1.Lines.Add('    oqry:= FTabela.Open(sSQL);            ');
  Memo1.Lines.Add('    FTabela.SerializarObjeto(oqry, Self); ');
  Memo1.Lines.Add('  finally          ');
  Memo1.Lines.Add('    FTabela.Free;  ');
  Memo1.Lines.Add('  end;       ');
  Memo1.Lines.Add('end          ');
  Memo1.Lines.Add('else         ');
  Memo1.Lines.Add('   id:= -1;  ');
  Memo1.Lines.Add('end;');
  Memo1.Lines.Add('');

  Memo1.Lines.Add('constructor T'+ Tabela+'.Create(_Filter: string);');
  Memo1.Lines.Add('var');
  Memo1.Lines.Add('FTabela: TTabela;  ');
  Memo1.Lines.Add('oqry   : TSQLQuery;');
  Memo1.Lines.Add('sSQL   : string;   ');
  Memo1.Lines.Add('begin');
  Memo1.Lines.Add('if _Filter <> '''' then                                     ');
  Memo1.Lines.Add('begin                                               ');
  Memo1.Lines.Add('_filter:= '' WHERE '' + _filter;');
  Memo1.Lines.Add('  sSQL    := ''SELECT * FROM '' + NomeTabela;         ');
  Memo1.Lines.Add('  sSQL    := sSQL + '' WHERE ID = '' + _Filter; ');
  Memo1.Lines.Add('  sSQL    := sSQL + '' ORDER BY ID'';       ');
  Memo1.Lines.Add('  FTabela := TTabela.Create;             ');
  Memo1.Lines.Add('  try                                     ');
  Memo1.Lines.Add('    oqry:= FTabela.Open(sSQL);            ');
  Memo1.Lines.Add('    FTabela.SerializarObjeto(oqry, Self); ');
  Memo1.Lines.Add('  finally          ');
  Memo1.Lines.Add('    FTabela.Free;  ');
  Memo1.Lines.Add('  end;       ');
  Memo1.Lines.Add('end          ');
  Memo1.Lines.Add('else         ');
  Memo1.Lines.Add('   id:= -1;  ');
  Memo1.Lines.Add('end;');
  Memo1.Lines.Add('');

  Memo1.Lines.Add('function T'+ Tabela+'.NomeTabela(): string;');
  Memo1.Lines.Add('begin');
  Memo1.Lines.Add('   Result:= '''+ Tabela + ''';');
  Memo1.Lines.Add('end;');
  Memo1.Lines.Add('');

  Memo1.Lines.Add('function T'+ Tabela+'.Carregar(): TObjectList<T'+Tabela+'>;');
  Memo1.Lines.Add('var');
  Memo1.Lines.Add('  FTabela: TTabela;');
  Memo1.Lines.Add('  o'+Tabela+':T'+Tabela+';');
  Memo1.Lines.Add('  oqry: TSQLQuery; ');
  Memo1.Lines.Add('  sSQL: string;    ');
  Memo1.Lines.Add('begin');
  Memo1.Lines.Add('  Result := TObjectList<T'+Tabela+'>.Create; ');
  Memo1.Lines.Add('  sSQL:= ''SELECT * FROM '' + NomeTabela + '' ORDER BY ID'';');
  Memo1.Lines.Add('  FTabela              := TTabela.Create; ');
  Memo1.Lines.Add('  try                                     ');
  Memo1.Lines.Add('    oqry:= FTabela.Open(sSQL);            ');
  Memo1.Lines.Add('    while not oqry.Eof do                 ');
  Memo1.Lines.Add('    begin                                 ');
  Memo1.Lines.Add('      o'+Tabela +'   := T'+Tabela+'.Create;  ');
  Memo1.Lines.Add('      FTabela.Classe := o'+Tabela +';        ');
  Memo1.Lines.Add('      FTabela.SerializarObjeto(oqry, o'+Tabela + ');');
  Memo1.Lines.Add('      Result.Add(o'+Tabela+');                   ');
  Memo1.Lines.Add('      oqry.Next;                          ');
  Memo1.Lines.Add('    end;                                  ');
  Memo1.Lines.Add('  finally                                 ');
  Memo1.Lines.Add('    FTabela.Free;                         ');
  Memo1.Lines.Add('  end;');
  Memo1.Lines.Add('end;');
  Memo1.Lines.Add('');

  Memo1.Lines.Add('function T'+ Tabela+'.Delete(): boolean;');
  Memo1.Lines.Add('var');
  Memo1.Lines.Add('  sSQL: string;');
  Memo1.Lines.Add('begin          ');
  Memo1.Lines.Add('  Result:= True;');
  Memo1.Lines.Add('  FTabela := TTabela.Create();   ');
  Memo1.Lines.Add('  try                            ');
  Memo1.Lines.Add('    sSQL   := ''DELETE FROM ''+ NomeTabela + '' WHERE ID = ''+ IntToStr(ID) ;');
  Memo1.Lines.Add('    FTabela.ExecutarSQL(sSQL);   ');
  Memo1.Lines.Add('  finally                        ');
  Memo1.Lines.Add('    FTabela.Free;                ');
  Memo1.Lines.Add('  end;                           ');
  Memo1.Lines.Add('end;');
  Memo1.Lines.Add('');

  Memo1.Lines.Add('function T'+ Tabela+'.Gravar(): boolean;');
  Memo1.Lines.Add('var                                             ');
  Memo1.Lines.Add('  sSQL: string;                                 ');
  Memo1.Lines.Add('begin                                           ');
  Memo1.Lines.Add('  Result  := True;');
  Memo1.Lines.Add('  FTabela := TTabela.Create();                  ');
  Memo1.Lines.Add('  try                                           ');
  Memo1.Lines.Add('    FTabela.Classe     := Self;                 ');
  Memo1.Lines.Add('    FTabela.NomeTabela := NomeTabela;           ');
  Memo1.Lines.Add('    if  ID <= 0 then                            ');
  Memo1.Lines.Add('    begin                                       ');
  Memo1.Lines.Add('      ID   := FTabela.GetNewID(NomeGenerator);  ');
  Memo1.Lines.Add('      sSQL := FTabela.PrepararInsert();         ');
  Memo1.Lines.Add('    end                                         ');
  Memo1.Lines.Add('    else                                        ');
  Memo1.Lines.Add('      sSQL := FTabela.PrepararUpdate();         ');
  Memo1.Lines.Add('    FTabela.ExecutarSQL(sSQL);                  ');
  Memo1.Lines.Add('  finally         ');
  Memo1.Lines.Add('    FTabela.free; ');
  Memo1.Lines.Add('  end; ');
  Memo1.Lines.Add('end;');
  Memo1.Lines.Add('');

  Memo1.Lines.Add('function T'+ Tabela+'.NomeGenerator(): string;');
  Memo1.Lines.Add('begin');
  Memo1.Lines.Add('   Result:= '''';');
  Memo1.Lines.Add('end;');
  Memo1.Lines.Add('');
  Memo1.Lines.Add('end.');

  Memo1.Lines.SaveToFile('U' + Tabela + '.pas');
end;

function TGerarModel.PrimeiraLetraMaiscula(Str: string): string;
var
  i: integer;
  esp: boolean;
begin
  str := LowerCase(Trim(str));
  for i := 1 to Length(str) do
  begin
    if i = 1 then
      str[i] := UpCase(str[i])
    else
      begin
        if i <> Length(str) then
        begin
          esp := (str[i] = ' ');
          if esp then
            str[i+1] := UpCase(str[i+1]);
        end;
      end;
  end;
  Result := Str;
end;

function TGerarModel.ValidaCampo(value, precisao, subTipo: string): string;
begin
  if value = 'SMALLINT' then
    Result := 'integer'
  else if value = 'INTEGER' then
    Result := 'integer'
  else if value = 'SMALLINT' then
    Result := 'integer'
  else if value = 'FLOAT' then
    Result := 'Currency'
  else if value = 'D_FLOAT' then
    Result := 'Currency'
  else if value = 'DATE' then
    Result := 'TDate'
  else if value = 'TIME' then
    Result := 'TTime'
  else if value = 'CHAR' then
    Result := 'String'
  else if value = 'INT64' then
  begin
    if (precisao = '18')and  (StrToInt(subTipo) > 0) then
    Result := 'Currency'
    else
    Result := 'int64';
  end
  else if value = 'DOUBLE' then
    Result := 'Currency'
  else if value = 'TIMESTAMP' then
    Result := 'Tdatetime'
  else if value = 'CSTRING' then
    Result := 'String'
  else
    Result := 'String';

end;

end.
